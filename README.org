#+TITLE: Wrapping =saga_cmd= to chain GIS-Data conversion
#+AUTHOR: Michel Kuhlmann *TK Consult AG*
#+OPTIONS: toc:nil

#+BEGIN_SRC emacs-lisp :results silent :exports none
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (dot . t)
     (haskell . t)
     (sh . t)))
#+END_SRC
* Description
  Haskell Library to wrap =saga_cmd=. 

  Two exectuables are currently shipped

  - sagaChain :: A program to chain different saga-calls, where the output of
     one command gets the input of the next.
  - sagaTopo :: Wrapper to create topographic-maps out of =sgrid=-files

  This is /Work In Progress/

* Installation
** Saga And haskell-platform
*** Linux
   #+BEGIN_SRC sh
     sudo aptitude install haskell-platform
     sudo aptitude install saga
   #+END_SRC
*** Windows with Cygwin
    - Get the [[http://www.haskell.org/platform/][haskell-platform]]
    - Install Saga with [[http://trac.osgeo.org/osgeo4w/][OSGeo4W]]
    - Put =saga_cmd= in the search path; add the line following (the actual
      filepath could differ) line to your =$HOME/.bashrc=
      #+BEGIN_SRC sh
        export PATH="$PATH:/cygdrive/c/Program Files (x86)/SAGA-GIS
      #+END_SRC

** saga-cmd-wrapper library

   #+BEGIN_SRC sh
       git clone https://www.github.com/michelk/saga-cmd-wrapper.hs.git
       cd saga-cmd-wrapper.hs
       cabal update && cabal install
   #+END_SRC
   
   The exectuables are usually installed into =$HOME/.cabal/bin=; to
   use them you have to put them into your search path. Put this into
   your =$HOME/.bashrc=:
   #+BEGIN_SRC sh
     export PATH="$PATH:$HOME/.cabal/bin"
   #+END_SRC

* Usage 
** =sagaChain=
   =sagaChain= lets you chain =saga_cmd= commands. The program needs the
   follwing specification:
   - source-format
   - destination-format
   - parameters to use for conversion
   - input-file

     These combinations are currently supported, where columns are
     sources and rows destinations:

     | to\form     | las | xyz-grid | grid | grid-filled |
     |-------------+-----+----------+------+-------------+
     | grid        | X   | X        |      |             |
     | grid-filled | X   | X        | X    |             |
     | hillshade   | X   | X        | x    | X           |
     | contour     | X   | X        | X    | X           |

     where
  - grid        :: A Grid which could contain gaps
  - grid-filled :: A Grid with interpolated values
  - hillshade   :: Analytical hillshade
  - contour     :: Iso-value-lines

   The pathways are visualized below                   

   #+BEGIN_SRC dot :exports results :results graphics :file doc/figures/chains.png :eval no-export
     digraph chains {
         graph [rankdir = LR]; 
         node [shape = ellipse, fontsize = 8];

         las [label = "LAS"];
         grd [label = "Grid"];
         grdF [label = "Grid-filled"];
         xyz [label = "xyz-grid"];
         cntr [label = "Contour"];
         hls [label = "Hillshade"];
         pt [label = "PointCloud"]

         xyzGrid [shape = record, label = "xyzGridToGrid|{d\nsep|CELLSIZE\nSEPERATOR}"]
         lasPt [shape = record, label = "lasToPtCld |"]
         ptGrd [shape = record, label = "ptCldToGrid|"]
         grdFl [shape = record, label = "gridFillGaps| {grdFlT |TARGET}"]
         grdHl [shape = record, label = "gridHillShade|"]
         grdCtl [shape = record, label = "gridContour| {min\nmax\nd |ZMIN\nZMAX\nZSTEP}"]

         las -> lasPt -> pt -> ptGrd -> grd;
         xyz -> xyzGrid -> grd ;
         grd -> grdFl -> grdF;
         grdF -> grdHl -> hls;
         grdF -> grdCtl -> cntr;
     }
   #+END_SRC

   #+RESULTS:
   [[file:doc/figures/chains.png]]

   For example

   #+BEGIN_SRC sh :results verbatim :eval no-export
       sagaChain --from xyz-grid --to hillshade --parameters xyzSep=tabulator:xyzCellSize=0.5
   #+END_SRC
** =sagaTopo=
   Wrapper-program to create topographic maps from =sgrd=-files

   For example
   #+BEGIN_SRC sh :results verbatim :eval no-export
       sagaTopo --min 280 --max 360  -o dem.tif dem.sgrd
   #+END_SRC

* Development

   In order to extend functionality
   
   - find the wanted library and module
   - create wrapper function
   - define output extension 
   - add chains

** Find the module
#+BEGIN_SRC sh
  cd saga-cmd-wrapper/do
  ./search <keyword> 
#+END_SRC

** Wrapper function and chain definition
   - edit =src/Math/Geometry/Saga/Data.hs=
   - add chain
   - add wrapper function

* ToDo
  - extend library-commands
  - merge =sagaTopo= into =sagaChain=
  - give the opportunity to clean intermediate files (sagaChain,sagaTopo)

