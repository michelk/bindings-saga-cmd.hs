#+TITLE: Wrapping =saga_cmd= to chain GIS-Data conversion
#+AUTHOR: Michel Kuhlmann *TK Consult AG*
#+OPTIONS: toc:nil
#+NAME: setup
#+BEGIN_SRC emacs-lisp :results silent :exports none
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (dot . t)
     (haskell . t)
     (sh . t)))
#+END_SRC
#+NAME: markdown-export
#+BEGIN_SRC emacs-lisp :results silent :exports none
  (org-md-export-to-markdown)
#+END_SRC
* Description
  Haskell Library to wrap =saga_cmd=.

  Two exectuables are currently shipped

  - sagaPipe :: A program to chain different saga-calls, where the output of
     one command gets the input of the next.
  - sagaTopo :: Wrapper to create topographic-maps out of =sgrid=-files

                For example

                #+BEGIN_SRC sh :results verbatim :eval no-export
                   sagaTopo --min 280 --max 360  -o dem.tif dem.sgrd
                #+END_SRC

  - sagaLut :: Program to create color lookup-tables with min/max values
               eg =sagaLut 260 280 > colors.txt=

  This is /Work In Progress/.

* Installation
** Saga And haskell-platform
*** Linux
   #+BEGIN_SRC sh
     sudo aptitude install haskell-platform
     sudo aptitude install saga
   #+END_SRC
*** Windows with Cygwin
    - Get the [[http://www.haskell.org/platform/][haskell-platform]]
    - Install Saga with [[http://trac.osgeo.org/osgeo4w/][OSGeo4W]]
    - Put =saga_cmd= in the search path; add the line following (the actual
      filepath could differ) line to your =$HOME/.bashrc=
      #+BEGIN_SRC sh
        export PATH="$PATH:/cygdrive/c/Program Files (x86)/SAGA-GIS
      #+END_SRC

** saga-cmd-wrapper library

   #+BEGIN_SRC sh
       git clone https://www.github.com/michelk/bindings-saga-cmd.hs.git
       cd bindings-saga-cmd.hs
       cabal update && cabal install
   #+END_SRC

   The exectuables are usually installed into =$HOME/.cabal/bin=; to
   use them you have to put them into your search path. Put this into
   your =$HOME/.bashrc=:
   #+BEGIN_SRC sh
     export PATH="$PATH:$HOME/.cabal/bin"
   #+END_SRC

* =sagaPipe=
** Usage
   =sagaPipe= lets you chain =saga_cmd= commands. The program could be
   used in two ways. Common for both modes are specification of
   parameters to use during conversion and the input-file.

   - Source-Target :: Specify a source-format and target-format
   - Processing-pathway :: Specify pathway/route to go exlicitly

   The pathways are visualized below

   #+BEGIN_SRC dot :exports results :results graphics :file doc/figures/chains.png :eval no-export
     digraph chains {
         graph [rankdir = LR];
         node [shape = ellipse, fontsize = 8];

         las [label = "las"];
         grd [label = "grid"];
         grdF [label = "grid-filled"];
         xyz [label = "xyz-grid"];
         cntr [label = "contour"];
         hls [label = "hillshade"];
         pt [label = "pointcloud"];
         tifHls [labal = "tif-hillshade"];

         xyzGrid [shape = record, label = "xyzGridToGrid|{cs\nsep|CELLSIZE\nSEPERATOR}"];
         lasPt [shape = record, label = "lasToPtCld |"];
         ptGrd [shape = record, label = "ptCldToGrid|"];
         grdFl [shape = record, label = "gridFillGaps| {grdFlT |TARGET}"];
         grdHl [shape = record, label = "gridHillshade|"];
         grdCtl [shape = record, label = "gridContour| {min\nmax\nd |ZMIN\nZMAX\nZSTEP}"];
         grdPolyCp [shape = record, label = "gridPolyClip| {poly|POLYGONS}"];
         hlsTif [shape = record, label = "gridTifHillshade"];

         las -> lasPt -> pt -> ptGrd -> grd;
         xyz -> xyzGrid -> grd ;
         grd -> grdPolyCp -> grd;
         grd -> grdFl -> grdF;
         grdF -> grdHl -> hls;
         grdF -> grdCtl -> cntr;
         hls -> hlsTif -> tifHls;
     }
   #+END_SRC

   #+RESULTS:
   [[file:doc/figures/chains.png]]

** From-To combinations
     These combinations are currently supported, where columns are
     sources and rows destinations:

     | to\form     | las | xyz-grid | grid | grid-filled |
     |-------------+-----+----------+------+-------------+
     | grid        | X   | X        |      |             |
     | grid-filled | X   | X        | X    |             |
     | hillshade   | X   | X        | x    | X           |
     | contour     | X   | X        | X    | X           |
     | poly-clip   |     |          | X    |             |

     where
  - grid        :: A Grid which could contain gaps
  - grid-filled :: A Grid with interpolated values
  - hillshade   :: Analytical hillshade
  - contour     :: Iso-value-lines


** Example
*** Source-Target
   #+BEGIN_SRC sh :results verbatim :eval no-export
       sagaPipe --from xyz-grid --to hillshade --parameters sep=tabulator:cs=0.5 dem.xyz
   #+END_SRC

   In the directory of the input-file, the follwing grids will be created:
   - =dem_grid.sgrd=
   - =dem_grid-filled.sgrd=
   - =dem_grid-filled_hillshade.sgrd=

*** Processing-pathway

    The equivalent exlicit version to above is

    #+BEGIN_SRC sh :results verbatim :eval no-export
       sagaPipe --chain xyzGridToGrid:gridFillGaps:gridHillshade --parameters sep=tabulator:cs=0.5 dem.xyz
    #+END_SRC

    Or for example If you would like to create a hillshade with some
    buildings removed; invert the buildings-shapefile and do the
    following

    #+BEGIN_SRC sh
      sagaPipe --chain xyzGridToGrid:gridFillGaps:gridHillshade:gridPolyClip:gridTifHillshade  \
               -p poly=BuildingsInv.shp:cs=0.5:sep=tabulator dem.xyz
    #+END_SRC

** =sagaTopo=
   Wrapper-program to create topographic maps from =sgrd=-files


* Development

   In order to extend functionality, the follwing steps are necessary
   - Find the wanted library and module
   - Edit =src/Math/Geometry/Saga/Data.hs=
     + create wrapper function
     + define output extension
     + add chain
   - Adjust documentation

** Find the module
#+BEGIN_SRC sh
  cd saga-cmd-wrapper/do
  ./search <keyword> 
#+END_SRC

** Wrapper function and chain definition
   Edit =src/Math/Geometry/Saga/Data.hs=
   - add chain
   - add wrapper function
** Documentation
   - Edit =README.org=
     + Add entry in matrix
     + Adjust dot-diagram
   - Export it to markdown (=M-x org-md-export-to-markdown=)

* ToDo
  - extend library-commands
  - merge =sagaTopo= into =sagaPipe=
  - cmd-line-opting to clean intermediate files (=sagaPipe=, =sagaTopo=)
  - cmd-line-option which color-palette to use (=sagaLut=)

