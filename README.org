#+TITLE: Wrapping =saga_cmd= to chain GIS-Data conversion
#+AUTHOR: Michel Kuhlmann *TK Consult AG*
* setup                                                            :noexport:
#+OPTIONS: toc:nil
#+NAME: setup
#+BEGIN_SRC emacs-lisp :results silent :exports none
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (dot . t)
     (haskell . t)
     (sh . t)))
#+END_SRC
#+NAME: markdown-export
#+BEGIN_SRC emacs-lisp :results silent :exports none
  (org-md-export-to-markdown)
#+END_SRC
* Description
  Haskell Library to wrap =saga_cmd=.

  Three exectuables are currently shipped

  - sagaPipe :: A program to chain different saga-calls, where the output of
     one command gets the input of the next.
  - sagaTopo :: Wrapper to create topographic-maps out of =sgrid=-files

                For example

                #+BEGIN_SRC sh :exports code :eval never
                   sagaTopo --min 280 --max 360  -o dem.tif dem.sgrd
                #+END_SRC

  - sagaLut :: Program to create color lookup-tables with min/max values
               eg =sagaLut 260 280 > colors.txt=

  This is /Work In Progress/.
** Implemented modules

   #+BEGIN_SRC sh :exports results :colnames yes :rownames yes
     $HOME/.cabal/bin/sagaPipe -m
   #+END_SRC

   #+RESULTS:
   | Command          | (cmdPar,sagaPar,default)                                           | sagaLib          | sagaModule | defaultSuffix      |
   |------------------+--------------------------------------------------------------------+------------------+------------+--------------------|
   | gridClassToPoly  | (all,CLASS_ALL,0):(id,CLASS_ID,1):(split,SPLIT,0)                  | shapes_grid      |          6 | _polygons.shp      |
   | gridClassifyFlat | (method,METHOD,2):(table,RETAB,reclassify.txt)                     | grid_tools       |         15 | _reclassified.sgrd |
   | gridContour      | (d,ZSTEP,1):(max,ZMAX,10000):(min,ZMIN,0)                          | shapes_grid      |          5 | _contour.sgrd      |
   | gridFillGaps     | (grdFlT,TARGET,1)                                                  | grid_spline      |          5 | _filled.sgrd       |
   | gridHillshade    | NA                                                                 | ta_lighting      |          0 | _hillshade.sgrd    |
   | gridPolyClip     | (poly,POLYGONS,)                                                   | shapes_grid      |          7 | _polyClip.sgrd     |
   | gridSlope        | (aspect,ASPECT,aspect)                                             | ta_morphometry   |          0 | _slope.sgrd        |
   | gridTifGdal      | NA                                                                 | io_gdal          |          2 | .tif               |
   | gridTifHillshade | (col,COL_PALETTE,2):(colRev,COL_REVERT,)                           | io_grid_image    |          0 | .tif               |
   | gridXyz          | NA                                                                 | io_grid          |          5 | .xyz               |
   | lasToPtCld       | NA                                                                 | io_shapes_las    |          1 | .spc               |
   | polyDissolve     | (f1,FIELD_1,1):(f2,FIELD_1,-1):(f3,FIELD_1,-1):(method,DISSOLVE,0) | shapes_polygons  |          5 | _disollved.shp     |
   | ptCldToGrid      | (cs,CELLSIZE,1)                                                    | pointcloud_tools |          4 | .sgrd              |
   | xyzGridToGrid    | (cs,CELLSIZE,1):(sep,SEPARATOR,space)                              | io_grid          |          6 | .sgrd              |
   |                  |                                                                    |                  |            |                    |

* Installation
** Saga And haskell-platform
*** Linux
   #+BEGIN_SRC sh :eval never
     sudo aptitude install haskell-platform
     sudo aptitude install saga
   #+END_SRC

*** Windows with Cygwin
    - Get the [[http://www.haskell.org/platform/][haskell-platform]]
    - Install Saga with [[http://trac.osgeo.org/osgeo4w/][OSGeo4W]]
    - Put =saga_cmd= in the search path; add the line following (the actual
      filepath could differ) line to your =$HOME/.bashrc=
      #+BEGIN_SRC sh :eval never
        export PATH="$PATH:/cygdrive/c/Program Files (x86)/SAGA-GIS
      #+END_SRC

** saga-cmd-wrapper library

   #+BEGIN_SRC sh :eval never
       git clone https://www.github.com/michelk/bindings-saga-cmd.hs.git
       cd bindings-saga-cmd.hs
       cabal update && cabal install
   #+END_SRC

   The exectuables are usually installed into =$HOME/.cabal/bin=; to
   use them you have to put them into your search path. Put this into
   your =$HOME/.bashrc=:
   #+BEGIN_SRC sh :eval never
     export PATH="$PATH:$HOME/.cabal/bin"
   #+END_SRC

* =sagaPipe=
** Usage
   #+BEGIN_SRC sh :results verbatim
   $HOME/.cabal/bin/sagaPipe --help
   #+END_SRC

   #+RESULTS:
   #+begin_example
   sagaPipe version 0.1.0.0, GPL licensed; written by Michel Kuhlmann 2013

   sagaPipe [OPTIONS] [DEM-input-file]
     Convert Digital Elevation Models (DEM) to diffent formats

   Common flags:
     -f --from=ITEM        Source-format
     -t --to=ITEM          Target-format
     -p --parameters=ITEM  Conversion-Parameters; delimited by ':'(eg
                           cs=0.5:sep=tabulator)
     -c --chain=ITEM       Conversion-pathway; delimited by ':'(eg
                           cXyzGridToGrid:cGridFillGaps)
     -o --output=ITEM      Output-file (optional; no intermediate files
                           preserved)
     -m --modules          Create a table of implemented modules
     -d --dot              Show implemented chains as a dot-graphics
     -n --nodes            Show implemented nodes
     -? --help             Display help message
     -V --version          Print version information
#+end_example

   =sagaPipe= lets you chain =saga_cmd= commands. The program could be
   used in two ways. Common for both modes are specification of
   parameters to use during conversion and the input-file.

   - Source-Target :: Specify a source-format and target-format
   - Processing-pathway :: Specify pathway/route to go exlicitly

   The pathways are visualized below

   #+BEGIN_SRC sh :exports results :results graphics :file doc/figures/chains.png
      $HOME/.cabal/bin/sagaPipe -d | dot -Tpng > doc/figures/chains.png
   #+END_SRC

   #+RESULTS:
   [[file:doc/figures/chains.png]]

** Example
*** Source-Target
   #+BEGIN_SRC sh :exports code :eval never
       sagaPipe --from xyz-grid --to grid-filled-hillshade-tif --parameters sep=tabulator:cs=0.5 -o dem_hillshade.tif dem.xyz
   #+END_SRC

   If =-o= hadn't been specified, in the directory of the input-file, the follwing grids would have been created:
   - =dem_grid.sgrd=
   - =dem_grid-filled.sgrd=
   - =dem_grid-filled_hillshade.sgrd=

*** Processing-pathway

    The equivalent exlicit version to above is

    #+BEGIN_SRC sh :exports code :eval never
       sagaPipe --chain xyzGridToGrid:gridFillGaps:gridHillshade --parameters sep=tabulator:cs=0.5 dem.xyz
    #+END_SRC

    Or for example If you would like to create a hillshade with some
    buildings removed; invert the buildings-shapefile and do the
    following

    #+BEGIN_SRC sh
      sagaPipe --chain xyzGridToGrid:gridFillGaps:gridHillshade:gridPolyClip:gridTifHillshade  \
               -p poly=BuildingsInv.shp:cs=0.5:sep=tabulator dem.xyz
    #+END_SRC

** =sagaTopo=
   Wrapper-program to create topographic maps from =sgrd=-files


* Development

   In order to extend functionality, the follwing steps are necessary

   - Find the wanted library and module
     + Eg with =./doc/search=
   - Edit =src/Math/Geometry/Saga/Data.hs=
     + create a SagaCmd (copy & paste an existing one; pretty straigt forward)
     + create a pathway-chain
   - Export =README.org= 

** Find the module
#+BEGIN_SRC sh
  cd saga-cmd-wrapper/do
  ./search <keyword> 
#+END_SRC

** New SagaCmd
   Edit =src/Math/Geometry/Saga/Data.hs=
   - Add Module
   - Add pathway node
** Documentation
   - Edit =README.org=
   - Export it to markdown (=M-x org-md-export-to-markdown=)

* ToDo
  - extend library-commands
  - merge =sagaTopo= into =sagaPipe=
  - cmd-line-option which color-palette to use (=sagaLut=)

